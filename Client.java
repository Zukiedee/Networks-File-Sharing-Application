//package client;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.*;
/**
 * Client Class
 * @authors Zukiswa Lobola, Mbaliyethemba Shangase and Simnikiwe Khonto.
 */
public class Client extends javax.swing.JFrame {
    private Socket socket;
    private String fileName;
    private PrintStream output;
    private final String fileNotFound = "404 Not Found";
    private final JFileChooser browser;
    private BufferedReader serverInput;
    private boolean connected = false;
    private boolean downloading = false;
    private DataInputStream clientData;
    private final String fileDirectorySplit;
    private JPanel panel;
    private JFrame frame;
    private JTextField owner;
    
    /**
     * Creates new form Client
     * @throws java.io.IOException
     */
    public Client() throws IOException {
        initComponents();
        setTitle("Client"); 
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        
        output = null;
        serverInput = null;
        browser = new JFileChooser();
        inputCommand.setFocusable(false);
        outputTextArea.setFocusable(false);
        outputTextArea.setEditable(false);
        sendButton.setEnabled(false);
        String os = System.getProperty("os.name");
        if (os.startsWith("Win")) fileDirectorySplit = "\\";
        else fileDirectorySplit = "/";
        
        /**
         * Handles default exit operation
         */
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent ev) {
                
                int exit = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Exit", JOptionPane.YES_NO_OPTION);
                if (exit == 0){
                    try {
                        if (connected){
                            output.println("4");
                            serverInput.close();
                            clientData.close();
                            socket.close();
                        }
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Something went wrong.", "Error", JOptionPane.ERROR_MESSAGE);
                        dispose();
                    }
                    dispose();
                }
                
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        socketPanel = new javax.swing.JPanel();
        ipLabel = new javax.swing.JLabel();
        ipInput = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        portInput = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        serverPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        serverLabel = new javax.swing.JLabel();
        cmdPanel = new javax.swing.JPanel();
        inputLabel = new javax.swing.JLabel();
        inputCommand = new javax.swing.JTextField();
        commandLabel = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 153));
        jPanel1.setForeground(new java.awt.Color(255, 153, 153));

        socketPanel.setBackground(new java.awt.Color(255, 204, 204));

        ipLabel.setText("IP Address:");

        portLabel.setText("Port:");

        connectButton.setBackground(new java.awt.Color(204, 0, 102));
        connectButton.setForeground(new java.awt.Color(255, 255, 255));
        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout socketPanelLayout = new javax.swing.GroupLayout(socketPanel);
        socketPanel.setLayout(socketPanelLayout);
        socketPanelLayout.setHorizontalGroup(
            socketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(socketPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(ipLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ipInput, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(portLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portInput, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        socketPanelLayout.setVerticalGroup(
            socketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, socketPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(socketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipLabel)
                    .addComponent(ipInput, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portLabel)
                    .addComponent(portInput, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        serverPanel.setBackground(new java.awt.Color(255, 153, 153));

        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        serverLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        serverLabel.setText("Server Responses:");

        javax.swing.GroupLayout serverPanelLayout = new javax.swing.GroupLayout(serverPanel);
        serverPanel.setLayout(serverPanelLayout);
        serverPanelLayout.setHorizontalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
            .addGroup(serverPanelLayout.createSequentialGroup()
                .addComponent(serverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        serverPanelLayout.setVerticalGroup(
            serverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverLabel)
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );

        cmdPanel.setBackground(new java.awt.Color(255, 153, 153));

        inputLabel.setText("Input:");

        commandLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        commandLabel.setText("Commands:");

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cmdPanelLayout = new javax.swing.GroupLayout(cmdPanel);
        cmdPanel.setLayout(cmdPanelLayout);
        cmdPanelLayout.setHorizontalGroup(
            cmdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cmdPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(cmdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cmdPanelLayout.createSequentialGroup()
                        .addComponent(commandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(cmdPanelLayout.createSequentialGroup()
                        .addComponent(inputLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))))
        );
        cmdPanelLayout.setVerticalGroup(
            cmdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cmdPanelLayout.createSequentialGroup()
                .addComponent(commandLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cmdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, cmdPanelLayout.createSequentialGroup()
                        .addComponent(inputCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(serverPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(socketPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(socketPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(cmdPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Connect to server on input IP Address and Port Number
     * @param evt 
     */
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        Client c;
        socket = null;
        String IP = ipInput.getText().trim();
        int port;
        
        try {
            port = Integer.parseInt(portInput.getText().trim());
            socket = new Socket(IP, port);
            output = new PrintStream(socket.getOutputStream());
            serverInput = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            outputTextArea.append("Successfully connected to Server!\n");
            userCommands();  
            ipInput.setFocusable(false);
            portInput.setFocusable(false);
            connected = true;
            connectButton.setText("Connected");
            connectButton.setEnabled(false);
            sendButton.setEnabled(true);
            inputCommand.setFocusable(true);
            outputTextArea.setFocusable(true);
            socketPanel.setBackground(new java.awt.Color(255, 153, 153));
            cmdPanel.setBackground(new java.awt.Color(255, 204, 204));
            clientData = new DataInputStream(socket.getInputStream());

        } catch (NumberFormatException | IOException ex ) {
            JOptionPane.showMessageDialog(this, "Error: " + ex, "Error Message", JOptionPane.ERROR_MESSAGE);
            try {
                c = new Client();
            } catch (IOException ex1) {
                JOptionPane.showMessageDialog(this, "Error: " + ex1, "Error Message", JOptionPane.ERROR_MESSAGE);
                System.exit(1);
            }
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * Send input command request to server
     * @param evt 
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        try {
            String msg = inputCommand.getText().trim();
            outputTextArea.append(msg + "\n");
            output.println(msg);   
            switch (msg){
                //upload
                case "1":
                    upload();
                    break;
                //query
                case "2":
                    String files = serverInput.readLine();
                    String list[] = files.split(",");
                    for (String file: list){
                        outputTextArea.append(file.trim()+"\n");
                    }
                    break;
                //download
                case "3":
                    downloading = true;
                    outputTextArea.append("Enter file name: ");
                    break;
                    
                //Exit
                case "4":
                    //in.close();
                    output.close();
                    socket.close();
                    dispose();
                    System.exit(0);
                default:
                    if(downloading){
                        //input file name of download file
                        String file = inputCommand.getText().trim();
                        
                        //check that file is available with server
                        if (!serverInput.readLine().equals(fileNotFound)){
                            //download file
                            download(file);
                            break;
                        }
                        else {
                            outputTextArea.append(fileNotFound);
                            break;
                        }
                    }
                    break;           
            }
            inputCommand.setText("");
            
        } catch (NumberFormatException | IOException e){
            JOptionPane.showMessageDialog(this, "Error: " + e, "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Client().setVisible(true);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error: " + ex, "Error Message", JOptionPane.ERROR_MESSAGE);
            }
        }); 
        
    }
    
    /**
     * Outputs command options for user to choose from.
     * @throws IOException 
     */
    public void userCommands() throws IOException {
        
        outputTextArea.append("\nCommands: \n1. Upload file.\n2. Query list of files\n3. Download file.\n4. Exit.\n");
    }
    
    /**
     * Uploads client file to the server.
     */
    public void upload() {
        try {           
            //Get file using JChooser
            int response = browser.showOpenDialog(null);
            
            if (response == JFileChooser.APPROVE_OPTION){
                //Read in file from file location
                File uploadFile = browser.getSelectedFile();
                int start = uploadFile.getAbsolutePath().lastIndexOf(fileDirectorySplit);
                fileName = uploadFile.getAbsolutePath().substring(start+1);
                //if file does not exist, returns back to the loop
                if(!uploadFile.exists()) {
                    outputTextArea.append(fileNotFound);
                    return;
                }

                panel = new JPanel(new GridLayout(0,2,2,2));
                frame = new JFrame();
                //panel.setLayout(new GridLayout(0,1));

                owner = new JTextField(20);
                JTextField executable = new JTextField(5);
                JTextField readable = new JTextField(5);
                JTextField writable = new JTextField(5);

                panel.add(new JLabel("Enter name of the file owner:"));
                panel.add(owner);

                panel.add(new JLabel("Set executable true or false:"));
                panel.add(executable);

                panel.add(new JLabel("Set readable true or false:"));
                panel.add(readable);

                panel.add(new JLabel("Set writable true or false:"));
                panel.add(writable);

                int option = JOptionPane.showConfirmDialog(frame, panel, "Set permissions for the file", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                if(option == JOptionPane.YES_OPTION){
                    String ownerInput = owner.getText();
                    String xInput = executable.getText();
                    String rInput = readable.getText();
                    String wInput = writable.getText();
                    try {
                        uploadFile.setExecutable(Boolean.valueOf(xInput));
                        uploadFile.setReadable(Boolean.valueOf(rInput));
                        uploadFile.setWritable(Boolean.valueOf(wInput));
                    } catch (Exception e) {
                        //TODO: handle exception
                        e.printStackTrace();
                    }

                }
                //Object owner = JOptionPane.showInputDialog(frame, "Enter name of the file owner:");
                //String executable = JOptionPane.showInputDialog(frame, "execute true or false");
                //Object readable = JOptionPane.showInputDialog(frame, "read true or false:");
                //Object writeable = JOptionPane.showInputDialog(frame, "write true or false:");

            
                byte[] bytes = new byte[(int) uploadFile.length()];

                FileInputStream fileInputStream = new FileInputStream(uploadFile);
                BufferedInputStream buffer = new BufferedInputStream(fileInputStream);

                DataInputStream dataInput = new DataInputStream(buffer);
                dataInput.readFully(bytes, 0, bytes.length);

                //handle file send over socket            
                OutputStream outputStream = socket.getOutputStream();

                //Sending file name and file size to the server
                DataOutputStream dataOutput = new DataOutputStream(outputStream);
                dataOutput.writeUTF(uploadFile.getName());
                dataOutput.writeLong(bytes.length);
                dataOutput.write(bytes, 0, bytes.length);
                dataOutput.flush();
                outputTextArea.append(fileName + " successfully uploaded to server.\n");  
                
            } else {
                outputTextArea.append("\nUpload was cancelled\n");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e, "Error Message", JOptionPane.ERROR_MESSAGE);
            outputTextArea.append("Error: " + e +"\n");
        }
    }

    /**
     * Downloads file from server.
     * @param fileName Name of the file that the client wants to download.
     * @throws java.io.FileNotFoundException
     */
    public void download(String fileName) throws FileNotFoundException, IOException {
        int bytesRead;
        
 
        	browser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
       		browser.setFileFilter(new FolderFilter());
        
        	int response = browser.showSaveDialog(null);
        
        	if (response == JFileChooser.APPROVE_OPTION){
            	String dir = browser.getCurrentDirectory().toString();
            	fileName = clientData.readUTF();
            	try (FileOutputStream fileOutput = new FileOutputStream(dir + fileDirectorySplit +fileName)) {
                	long size = clientData.readLong();
                	byte[] buffer = new byte[1024];
                	while (size > 0 && (bytesRead = clientData.read(buffer, 0, (int) Math.min(buffer.length, size))) != -1) {
                    	fileOutput.write(buffer, 0, bytesRead);
                    	size -= bytesRead;
                	}
                	fileOutput.close();
                	outputTextArea.append("\n" + fileName +" received from Server.");

            	}catch (Exception e) {
                	JOptionPane.showMessageDialog(null, "Error: " + e, "Error Message", JOptionPane.ERROR_MESSAGE);
           		}
        	}        
       		else {
            	outputTextArea.append("\nDownload cancelled");
            	return;
        	}
        	downloading = false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cmdPanel;
    private javax.swing.JLabel commandLabel;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField inputCommand;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextField ipInput;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JTextField portInput;
    private javax.swing.JLabel portLabel;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JPanel serverPanel;
    private javax.swing.JPanel socketPanel;
    // End of variables declaration//GEN-END:variables
}
class FolderFilter extends javax.swing.filechooser.FileFilter {

    @Override
    public boolean accept(File f) {
        return f.isDirectory();
    }

    @Override
    public String getDescription() {
        return "File Directory";
    }
}
